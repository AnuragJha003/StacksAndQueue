class Solution {
public:
    int largestRectangleArea(vector<int>& heights) {
        int ns[heights.size()],ps[heights.size()];//VECTOR FOR PUSHING NEXT AND PREVIOUS SMALLER ELEMTNS INDEX
        stack<int> nss,pss;//STACK FOR THE ABOVE SAME 
        int maxi=INT_MIN;//MAXI IS INT_MIN OF THE PART 
        
		//To find Previous smaller element
        for(int i=0;i<heights.size();i++){
            while(!pss.empty() && heights[pss.top()]>=heights[i]){//LARGER OR EQUAL ELEMT KO POP OUT KRTE RHO THATS IT FROM THE STACK PORTION
                pss.pop();
            }
            if(pss.empty()){
                ps[i]=(-1);//EMPTY H MEANS THERS NO PREVIOUS SMALLER ELEMNT 
            }else{
                ps[i]=(pss.top());//ELSE TOPMOST WALA HI HOGA  PSS VECTOR IS STROING THE NUMBER 
            }
            
            pss.push(i);/// WE R PUSHINHG THE INDEX AT THAT LOCATION IN HERE
        }
		
		//To find next smaller element
        for(int i=heights.size()-1;i>=0;i--){
            while(!nss.empty() && heights[nss.top()]>=heights[i]){
                nss.pop();
            }
            if(nss.empty()){
                ns[i]=(heights.size());//AUR KOI NEXT GREATR ELMNT NA MILE THEN PUSH BACK THE SIZED INDEX IN HERE
            }else{
                ns[i]=(nss.top());
            }
            nss.push(i);///....SAME IN HERE
        }
        
		 //To find height of each rectangle formed using given formula
         for(int i=0;i<heights.size();i++){
             int cur=(ns[i]-ps[i]-1)*heights[i];//CURRENT AREA FORMULA
             maxi=max(maxi,cur);//HAR BAAR MAXIMUM CHAHIYE SO USED
         }
        return maxi;
    }
};

https://leetcode.com/problems/largest-rectangle-in-histogram/
